import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class PatternDrawing extends JPanel {

    // ---------- DDA Algorithm ----------
    private void drawLineDDA(Graphics g, int x0, int y0, int x1, int y1, String style) {
        int dx = x1 - x0;
        int dy = y1 - y0;

        int steps = Math.max(Math.abs(dx), Math.abs(dy));
        float xInc = dx / (float) steps;
        float yInc = dy / (float) steps;

        float x = x0;
        float y = y0;

        for (int i = 0; i <= steps; i++) {
            if (style.equals("DOTTED")) {
                if (i % 2 == 0)
                    g.fillRect(Math.round(x), Math.round(y), 1, 1);
            } else if (style.equals("THICK")) {
                g.fillRect(Math.round(x), Math.round(y), 2, 2);
            } else {
                g.fillRect(Math.round(x), Math.round(y), 1, 1);
            }
            x += xInc;
            y += yInc;
        }
    }

    // ---------- Bresenham Algorithm ----------
    private void drawLineBresenham(Graphics g, int x0, int y0, int x1, int y1, String style) {
        int dx = Math.abs(x1 - x0);
        int dy = Math.abs(y1 - y0);
        int sx = (x0 < x1) ? 1 : -1;
        int sy = (y0 < y1) ? 1 : -1;
        int err = dx - dy;

        int count = 0; // for dashed style

        while (true) {
            if (style.equals("DASHED")) {
                if ((count / 5) % 2 == 0)
                    g.fillRect(x0, y0, 1, 1);
            } else { // SOLID
                g.fillRect(x0, y0, 1, 1);
            }

            if (x0 == x1 && y0 == y1)
                break;
            int e2 = 2 * err;
            if (e2 > -dy) {
                err -= dy;
                x0 += sx;
            }
            if (e2 < dx) {
                err += dx;
                y0 += sy;
            }
            count++;
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        setBackground(Color.WHITE);

        // Outer Rectangle (DDA - Dotted)
        g.setColor(Color.BLUE);
        drawLineDDA(g, 50, 50, 250, 50, "DOTTED");
        drawLineDDA(g, 250, 50, 250, 200, "DOTTED");
        drawLineDDA(g, 250, 200, 50, 200, "DOTTED");
        drawLineDDA(g, 50, 200, 50, 50, "DOTTED");

        // Inner Rectangle (DDA - Thick)
        g.setColor(Color.GREEN);
        drawLineDDA(g, 100, 100, 200, 100, "THICK");
        drawLineDDA(g, 200, 100, 200, 150, "THICK");
        drawLineDDA(g, 200, 150, 100, 150, "THICK");
        drawLineDDA(g, 100, 150, 100, 100, "THICK");

        // Diamond (Bresenham - Solid & Dashed mix)
        int midX = (50 + 250) / 2; // center x
        int midY = (50 + 200) / 2; // center y

        g.setColor(Color.RED);
        drawLineBresenham(g, midX, 50, 250, midY, "SOLID"); // top-right
        drawLineBresenham(g, 250, midY, midX, 200, "DASHED"); // right-bottom
        drawLineBresenham(g, midX, 200, 50, midY, "SOLID"); // bottom-left
        drawLineBresenham(g, 50, midY, midX, 50, "DASHED"); // left-top
    }

    // ---------- Main Method ----------
    public static void main(String[] args) {
        JFrame frame = new JFrame("Pattern Drawing - DDA & Bresenham");
        PatternDrawing panel = new PatternDrawing();
        frame.add(panel);
        frame.setSize(400, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
